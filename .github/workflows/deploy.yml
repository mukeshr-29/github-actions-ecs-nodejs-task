name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/c1z5d8e5
    - name: Build Docker image
      run: docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
      env:
        IMAGE_TAG: latest

    - name: Push Docker image to ECR
      run: docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
      env:
        IMAGE_TAG: latest

    - name: Update Task Definition with New Image
      run: |
          NEW_TASK_DEFINITION=$(echo $ECS_TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '
          .taskDefinition | 
          {
            family: .family,
            networkMode: .networkMode,
            containerDefinitions: [.containerDefinitions[] | .image = $IMAGE ],
            requiresCompatibilities: .requiresCompatibilities,
            cpu: .cpu,
            memory: .memory,
            executionRoleArn: if has("executionRoleArn") then .executionRoleArn else empty end,
            taskRoleArn: if has("taskRoleArn") then .taskRoleArn else empty end,
            platformVersion: "LATEST", # For Fargate compatibility
            cpu: "256", # Specify CPU for Fargate task
            memory: "512" # Specify memory for Fargate task
          }
          ')
          echo "New Task Definition: $NEW_TASK_DEFINITION"
          echo $NEW_TASK_DEFINITION > new-task-def.json

    - name: Register New Task Definition
      run: aws ecs register-task-definition --cli-input-json file://new-task-def.json

    - name: Update ECS Service
      run: aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment